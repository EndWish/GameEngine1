언어설정 : Edit - Editer Preferences - Langauge검색 - 원하는 언어 선택
Window - Load Layout - UE4 classic Layout 을 선택하여 기본 편집창 구성으로 세팅할 수 있다.
FPS활성화 : 뷰포트의 메뉴 - show FPS
플레이 성능 조절 : Settings - Engine Scalability Settings - 알아서 조절

뷰포트에서 이동 : "우클릭 + w,a,s,d,e,q"로 뷰포트 이동가능, "우클릭 + 마우스 휠" 로 속도 조정가능
물체 포커싱 : 물체 선택후 f키

전체 저장 : 컨트롤 + 쉬프트 + s
컨트롤+D로 복제가능
알트+드레그 로 복제가능
End로 물체를 바닥에 붙이기 가능
v키를 누르고 물체를 이동시키면 파란색 점이 생기며 거기에 딱 붙일 수 있다. => 천장이나 벽에 붙이기 좋다.
직교투영에서 휠클릭으로 자를 이용할 수 있다.

스페이스바로 w,e,r(이동,회전,스케일)변경이 가능하다.

컨트롤+L 키를 눌러서 태양 조절가능

뷰포트 오른쪽위에 그리드의 수치를 바꿔주면 드래그로 움직이는 단위를 바꿀 수 있다.

outliner에서 A액터를 B액터에 드래그하면 B의 자식으로 설정할 수 있다.
메테리얼 드래그해서 뷰포트의 물체에 드랍하면 입힐 수 있다.

언리얼에서 모델을 만들때 피벗을 조정한후 로컬좌표계를 월드좌표계와 똑같이 만드는 법 : Modeling Mod - Mode Toolbar - BakeRS

언리얼 엔진의 두가지 함수 : Pure함수 - 판단만 하는 함수, 일반 함수

project setting  - Maps & modies - Default GameMode 수정
해당 레벨만 바꾸는 법 : settings - world settings - GameMode Override 수정
DefaultPawn : 플레이어에 사용될 클래스 캐릭터

내가 보는 것 처럼 물체를 이동 : 물체 우클릭 - 파일럿 

카메라 처음 설정 : 카메라 디테일 창  - Auto Activate For Player

하나의 메쉬로 합치기(모델 만들기) : 여러 오브젝트 선택 - Actor메뉴 선택 - Merge Actors - 머지 후 피봇(x축이 앞쪽으로) 확인하기

내가 만든 Pawn클래스에서 (self)디테일 창의 Use Controller Roation Pitch/Yaw/Roll을 켜줘야 회전도 적용된다.
플레이어는 기본적으로 화면에 그려지지 않는다. 그리고 싶다면 => Mesh Component의 Owner No See 비활성화 한다.
카메라 오프셋 주는 법 : SpringArm 컴포넌트 추가 + SpringArm밑에 Camera 컴포넌트 추가.
카메라 레깅 기능 : SpringArm의 Enable Camera Lag/Rotation Lag 활성화

Add Default Movement Binding을 끄면 기존의 이동이 작동하지 않는다.

Input Action의 Value Type을 바꿔서 변수타입을 변경할 수 있다.
Input Mapping Context를 추가해서 IA를 연결해준다.
input을 이용하여 회전시키는 것은 컨트롤러를 회전시켜서 붙어있는 폰이 같이 회전하는 방식이다.
하지만 이동은 컨트롤러를 회전시키는 것이 아니라 폰(플레이어)를 직접 움식여야 한다. 
Get Controlled Pawn을 이용해서 래퍼런스를 얻어올 수 있다. + Add Movement Input을 이용해서 움직일 수 있다.
플레이어 컨트롤러를 상속받은 블루프린트를 만들어서 게임모드에 적용시켜준다.
Negate : 값을 반전시켜 준다.

플레이어 컨트롤러에서 Enhanced Input Local Player Subsystem을 타겟으로 Add Mapping Context를 시작할때 설정해야 한다.


Mapping Context의 Modifiers속성에서 Negate를 추가하면 값이 반대로 들어간다.
같은 속성에서 Swizzle Input Axis Values를 통해 입력의 xyz를 바꿀수 있다.

화살표 컴포넌트 : 위치지정 및 방향지정에 유용한 컴포넌트

물리적인 처리를 하기 위해서는 클래스의 Simulate Physics를 체크하고 메쉬에 충동영역을 설정(Num Collision Primitives가 1개 이상)해야 한다. 그리고 details창의 Collision의 Collision Complexity를 Simple And Complex로 바꿔준다.

arrow 컴포넌트의 hidden in Game을 풀어주면 화면에서도 보인다.

컨트롤러의 회전을 따르게 하는 방법 : spring arm의 Use Pawn Control Rotation

애니메이션 임포트 : 메쉬 선택 + Animation의 Advenced탭 설정(Custom Sample Rate)
애니메이션 적용 : 스켈레톤 메쉬의 디테일 탭에 AnimationMode설정

이동 방향으로 바라보도록 하는 옵션 : Character Movement 컴포넌트에 Orient Rotation to Movement를 키면된다.

속도를 구하는 함수 : Get Velocity(Movement 컴포넌트가 있을 때)
그라운드 스피드는 z축을 제외한 x,y값의 길이만 구하면 된다 : Vector Length XY


에니메이션 블루프린트를 사용할려면 스켈레톤 메쉬 컴포넌트에서 Use Animation BluePrint를 설정해줘야 한다.
에니메이션 블루프린트에서 Output Pose에 출력할 포즈를 넣어줘야 한다.
애니메이션 포즈 노드에서 디테일 창의 loop를 활성화하면 반복하여 에니메이션이 실행된다.
blend Poses By Bool : bool 값을 이용해서 두개의 포즈중 하나를 선택해서 출력으로 보내주는 노드(함수)
애니메이션의 Event Graph에서 변수들을 얻어올 수 있다.
애니메이션 blend space : 2가지 이하의 속성을 이용하여 그 지분에 따라 여러 포즈중 하나의 포즈를 실행하도록 하는 것.
애니메이션 State 머신 : 

movement 컴포넌트의 Max Acceleration을 줄여서 가속도를 적게 주도록 할 수 있다.

IMC의 Trigger조건을 추가하여 "눌렀을때만" 을 구현할 수 있다.

character movement컴포넌트의 IsFalling : 물체가 떨어지고 있는지 판단해주는 함수
애니메이션이 끝나면 자동으로 다음 애니메이션으로 넘어가도록 하는 법 : 스테이트 머신의 간선을 선택후 디테일 창에 Automatic Rule Based onSequence를 활성화
애니메이션이 얼마나 남았는지 리턴해주는 함수 : Time Remaining 함수
Current Time함수도 있다.

섹션 : 몽타주의 가장 위쪽(Default가 기본적으로 들어가 있는 보라색 노드)라인, Montage Sections탭에서 설정을 해주자.(자동으로 다음 섹션으로 넘어갈 수 있다.)
play Anim Montage(모든 섹션을 플레이) vs play Montage(하나의 섹션 실행?, onCompleted노드는 실행이 끝나면 다음 노드로 가도록 함. OnBlendOut은 동작이 끝날쯔음)
노드에 시계 모양이 있다면 그 노드를 처리하는데 오래 걸린다는 뜻

몽타주 애니메이션의 결과는 슬롯이로 들어가게 된다. 여러개의 slot이 모여서 그룹이된다.
슬롯에 결과가 오면 이전의 애니메이션을 덮어 쓴다.오지 않으면 입력으로 들어온 Source포즈가, 입력이 자체가 없다면 T포즈가 반환된다.


Do Once 노드 : 딱 한번만 진행되도록 해줌, Reset을 통해 다시 실행되도록 할 수 있다.

Character - Bones - All Hierachy 를 누르고 조명을 Lighting Only로 해놓으면 뼈대를 보기 쉽다.

특정 부분만 애니메이션을 적용하는 방법 : Layer blend per bone 노드를 추가후 디테일 창에서 Layer Setup - Branch Filters 추가 - Bone Name(어느 노드 부터 적용할 것인가)과 Blend Depth(몇번째 자식 까지 적용할 것인가, 0은 전부)를 적어준다. + Mesh Space Rotation Blend
언리얼 엔진은 포즈의 output을 두 군데에 연결할 수 없다. => 애니메이션 포즈 캐쉬(캐쉬드 포즈)를 이용한다.
	New Save Cached Pose, Use cached pose 노드를 사용

물체가 운동할때는 simple shape을 사용한다.
물체가 정지해 있을경우는 simple shape 또는 complex shape 아무거나 사용해도 된다.

컨트롤 + E, 컨트롤 + B로 매쉬창으로 이동가능
Show - Simple Collision, Complex Collision을 통해 볼 수 있다.
디테일 창 - Collision Complexity : 충돌체크에 대한 정책
	Project Default : 프로젝트 세팅 - 물리(physics) - Default Shape Complexity의 설정을 따른다.
	Use Complex Collision As Simple : Complex Collision을 Simple Collision으로 사용하겠다는 의미
	Use Simple Collision As Complex : Simple만 사용
	Simple And Complex : 둘다 사용할 수 있는 정책(기본적으로 움직이는 물체는 Simple Collsi)
메쉬 창에서 메뉴바의 Collision를 선택해서 Simple Collision을 추가할 수 있다.

움직일때는 Simple Collision을 사용하는 매쉬를 사용하다가 정지하게 되면 Complex Coliision을 가진 매쉬로 바꿔치기 한다.

언리얼 엔진은 프로젝트간의 마이그레이션 기능을 이용해서 파일을 옮기는 것을 권장한다. 폴더to폴더로 파일을 옮기는 것은 언리얼 엔진 버전이 맞는지 연관된 에셋이 존재하는지 확인해야 한다.

Collision Preset : 오브젝트의 유형을 설정한다. Custom을 통해 직접 하나하나 설정할 수 있다.
hit 이벤트 -> 충돌 반응이 block으로 되어 있을때 발생
overlap 이벤트 -> 충돌 반응이 overlap으로 되어 있을때 발생
overlap과 block이 만나면 overlap됨, ignore와 block이 만나면 ignore됨
alt + c : 메인 편집창에서 충돌 영역을 확인할 수 있다.
실행중 + ~(틸다) + (show Collision 명령어) : 충돌 영역을 인게임에서 볼 수 있다.
충돌 문제 발생시 -> 충돌 shape이 있는지 확인한다 -> Generate Overlap Events를 확인한다 -> Collsision Responses를 확인한다. -> 캐릭터나 원치 않는 오브젝트와 충돌하는지 확인한다

메뉴창의 Make Static Mesh를 통해 스켈레탈 메쉬를 스테틱 메쉬로 만들 수 있다.

소켓 추가 : 뼈의 계층 구조에서 뼈를 우클릭 - add socket, add preset asset을 통해 미리볼 수 있다. 콘텐츠 브라우저에서 칼을 Mesh밑에 컴포넌트로 추가하고 디테일 창에서 Sockets의 Parent Socket을 설정한다.

몽타주에서 우클릭 - add Notify - new 

몽타주에서 세션이 계속 플레이 되도록 하는 방법 : Montage Sections탭에서 다음 섹션을 자기자신을 선택해준다.

set Use Controller Rotation Yaw : 컨트롤러의 회전값과 똑같이 폰을 회전시킨다.
set Relative Location : 현재 위치에서 값만큼 오프셋을 더한다. (0,0,0)으로 셋하면 원래 위치로 돌아온다.

Get Player Camera Manger노드에서 set View Pitch Max/Min 세팅 가능

HUD 표시 - HUD액터 생성 후 - Event Receive Draw HUD + Draw Texture 노드 추가.

광선 쏘기 : line Trace By Channel 노드 추가. break Hit Result 노드를 통해 Out Hit로 나온 충돌정보를 나눌 수 있다.
	물체의 Collision Presets 설정에서 Trace Responses의 Visibility가 설정이 되어있어야(ignore)가 아니여야 충돌체크를 할 수 있다.

데미지 처리 : apply Damage노드를 이용해서 데미지를 줄 수 있다. 데미지를 받은 액터는 Any Damage이벤트를 통해 데미지 처리를 할 수 있다.
